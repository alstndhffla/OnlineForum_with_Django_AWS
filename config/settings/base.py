"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
"""
서버의 고정 아이피를 setting.py(base.py) 에 등록했기 때문에 이제 기존 localhost:8000 로는 접속할 수 가 없다.
그래서 구분해줘야 한다.
기존 settings.py 파일의 위치는 C:/projects/mysite/config인데 
base.py 파일의 위치는 C:/projects/mysite/config/settings로 디렉터리가 더 깊어졌기 때문에 
.parent를 한 번 더 사용하여 BASE_DIR을 설정
"""
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'n62=fck*$qyh7*o95y8#pb1mo5oh#ki-*!@af60=fq4!=s$%)f'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

"""
외부에 서비스하려면 AWS 에 받은 고정 IP 를 아래에 입력해야 한다.
"""
ALLOWED_HOSTS = ['3.34.54.66']


# Application definition

# 로그인 성공시 이동하는 URL
LOGIN_REDIRECT_URL = '/'
# 로그아웃시 이동할 페이지
LOGOUT_REDIRECT_URL = '/'


"""
1.
서버 실행 초기에 아래와 같은 문장이 cmd 창에 나타나는데 이는 기본설치된 앱을 사용할 테이블이 없기 때문이다.
You have 18 unapplied migration(s).
Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run 'python manage.py migrate' to apply them.
해결방법으로는 윗줄의 명령문을 입력해 해당 테이블을 생성해주면 된다.
2.
forum/models.py 에 만든 모델을 이용하여 테이블을 생성하려면 아래 항목에 forum 앱을 추가해야한다.
cmd 창에 python manage.py makemigrations 입력해 실행시킨다.(테이블 작업 파일을 만들기)
makemigrations 명령을 수행하면 forum/migrations/0001_initial.py이라는 파일이 자동으로 생성된다
모델의 변경사항이 없다면 cmd 창에서 '모델 변경 사항 없음'이라고 알려준다.
이후 python manage.py migrate 를 입력해 등록된 앱에 있는 모델을 참조해 실제 테이블을 만들게 한다.
'django.contrib.auth' - 기본적으로 세팅되어있는 로그인/로그아웃 기능 구현 앱
'common.apps.CommonConfig' - 로그인/로그아웃을 위한 폴더(단순 게시판이 아닌, 향후 범위 확장시 여러 곳에서 공통적으로 
                             쓸 수 있도록 다른 폴더에 따로 구현
                             
"""
INSTALLED_APPS = [

    'common.apps.CommonConfig',
    'forum.apps.forumConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# 'django.middleware.csrf.CsrfViewMiddleware' 이게 자동추가되는데 여기에 csrf_token 기능이 들어있다.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

# 템플릿을 만들기 전에 템플릿을 저장할 디렉터리를 루트 디렉터리 바로 밑에 생성
# (mysite) C:\projects\mysite>mkdir templates
# 템플릿 디렉터리를 'DIRS': [BASE_DIR / 'templates'] 에 등록.
# 현재 BASE_DIR 은 C:/projects/mysite이므로 templates만 더 붙여 C:/projects/mysite/templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
# - BASE_DIR은 프로젝트 디렉터리를 의미하며, 현재 BASE_DIR은 C:/projects/mysite이다.
# - 데이터베이스를 여러 개 사용할 때 default에 지정한 데이터베이스 외에 추가로 등록해 사용할 수 있다
# SQLite는 주로 소규모 프로젝트에서 사용되는 파일 기반의 가벼운 데이터베이스이다.
# 보통 초기 개발 단계에서 SQLite를 사용하여 빠르게 개발하고, 서비스로 제공할 때 운영 환경에 어울리는 데이터베이스로 바꾼다.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',

    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
"""
웹 페이지에 디자인을 적용하려면 스타일시트(CSS)를 사용해야 하며, 
이를 적용하려면 CSS 파일이 스태틱(static) 디렉터리에 있어야 한다.
"""
STATIC_URL = '/static/'

# 디렉터리 추가 -> BASE_DIR / 'static' 은 C:/projects/mysite/static 을 의미
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

"""
장고 로깅 : docs.djangoproject.com/en/3.0/topics/logging
오류 표시를 위해 로그파일 등록 -> DEFAULT_LOGGING 설정
아래 설정을 완료하고 서버/개발 환경 둘 다 logs 디렉터리를 반드시 생성해야 한다.
-> (mysite) ubuntu@ip-172-26-14-116:~/projects/mysite$ mkdir logs
그리고 logs 디렉터리는 버전 관리 대상이 아니므로 .gitignore 파일에 추가 -> logs
"""
LOGGING = {
    # version은 고정값 1을 사용해야 한다
    'version': 1,
    # True로 설정하면 기존에 설정된 로거들을 사용하지 않게 된다. default 가 false
    'disable_existing_loggers': False,
    # DEBUG 항목의 True, False를 판단
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 로그를 출력할 형식 - 서버의 시간, 출력내용
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] {message}',
            'style': '{',
        },
        # 현재시간, 로그의 레벨, 로거명, 출력내용의 포맷터 추가
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
        },
    },
    # 로그의 출력 방법
    'handlers': {
        # 콘솔에 로그를 출력
        'console': {
            'level': 'INFO',
            # DEBUG=True일 때만 로그를 출력
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        # 개발 서버에서만 사용하는 핸들러로 콘솔에 로그를 출력
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        # 로그 내용을 이메일로 전송하는 핸들러
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'file': {
            'level': 'INFO',
            'filters': ['require_debug_false'],
            # 로그가 무한히 증가되더라도 일정 개수의 파일로 롤링(Rolling) - 로그 파일이 너무 커져서 디스크가 꽉 차는 위험을 방지
            'class': 'logging.handlers.RotatingFileHandler',
            # 로그 파일명은 logs 디렉터리에 mysite.log
            'filename': BASE_DIR / 'logs/mysite.log',
            # 로그파일크기 5 MB
            'maxBytes': 1024*1024*5,
            # 총 5개의 로그 파일(롤링되는 파일 갯수)
            'backupCount': 5,
            'formatter': 'standard',
        },
    },
    'loggers': {
        # 장고 프레임워크가 사용하는 로거, 로그 레벨이 INFO 이상일 경우에만 로그를 출력
        'django': {
            'handlers': ['console', 'mail_admins', 'file'],
            'level': 'INFO',
        },
        # 개발 서버가 사용하는 로거
        'django.server': {
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': False,
        },
        'forum': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
    }
}
